#!/usr/bin/env zsh
# Copyright 2025 Arne Roomann-Kurrik

set -e

# This script passes the staged git changes to the llm command line tool with a prompt
# instructing it to format the changes into a conventional commit message.  Then it
# prints the commit message to the console and waits for user confirmation via a 'y' key press.
# If any other key is pressed, the script exits.  If 'y' is pressed, the script calls git commit
# with the formatted commit message.

# Setup:
# 1. Install the llm command line tool:
#    pip install llm
# 2. Install the Ollama backend:
#    llm install llm-ollama
# 3. Pull the required model:
#    ollama pull qwen2.5-coder:7b-instruct
#
# Usage:
#    git add <files>                # First stage your changes
#    git llm-commit                 # Use default model (qwen2.5-coder:7b-instruct)
#    git llm-commit -m gemma3:27b   # Specify a different model
#    git llm-commit --show_prompt   # Show the prompt sent to the LLM
#
# To use as a git subcommand:
#    1. The script must be executable
#    2. The script must be on your PATH

# Parse command line flags
SHOW_PROMPT=false

# Works with
# -m gemma3:27b
# -m qwen2.5-coder:7b-instruct
# -m qwen2.5-coder:14b
MODEL="qwen2.5-coder:7b-instruct"

while [[ $# -gt 0 ]]; do
  case $1 in
  --show_prompt)
    SHOW_PROMPT=true
    shift
    ;;
  -m | --model)
    MODEL="$2"
    shift 2
    ;;
  *)
    shift
    ;;
  esac
done

# Check if there are any staged changes
if [[ -z "$(git diff --staged)" ]]; then
  echo "No staged changes to commit."
  exit 0
fi

# Generate summaries for each changed file
CHANGED_FILES=($(git diff --staged --name-only))
FILE_SUMMARIES=""

for file in $CHANGED_FILES; do
  echo "Generating summary for $file..."
  FILE_DIFF=$(git diff --staged -- "$file")
  if [[ -n "$FILE_DIFF" ]]; then
    SUMMARY_PROMPT=$(
      cat <<EOF
Summarize the following git diff in a single line, focusing on the key changes.
If the diff appears to be partial, infer what you can about the type of change,
but don't mention the incomplete context:

$FILE_DIFF
EOF
    )
    # Truncate to first 5000 chars if needed
    SUMMARY_PROMPT="${SUMMARY_PROMPT:0:5000}"
    SUMMARY=$(echo "$SUMMARY_PROMPT" | llm -m "$MODEL")
    FILE_SUMMARIES+="$file: $SUMMARY"$'\n'
  fi
done

CHANGES_PROMPT=$(
  cat <<EOF
Produce a git commit message for the changes described below after the ===CHANGES=== line.
- You MUST use the conventional commits format.
- The summary line MUST be in the format: \`<type>(<scope>): <description>\`.
- You MUST use one of the following types: feat, fix, docs, style, refactor, perf, test, chore.
- You MAY include additional lines after the summary line explaining specific changes as single-line bullets.
- You MUST only output the text of the git commit message, with no other formatting.
- YOU MUST NOT wrap the output in backticks like \`\`\`.
- Use the per-file summaries to help determine the type and scope of the changes.

===CHANGES===
$FILE_SUMMARIES
EOF
)

if [[ $SHOW_PROMPT == true ]]; then
  echo "Prompt"
  echo "----------------------"
  echo "$CHANGES_PROMPT"
  echo "----------------------"
  echo
fi

COMMIT_MESSAGE=$(echo "$CHANGES_PROMPT" | llm --usage -m "$MODEL")

echo "Proposed commit message:"
echo "----------------------"
echo "$COMMIT_MESSAGE"
echo "----------------------"

echo -n "Press 'y' to commit with this message, any other key to abort: "
read -k 1 key
echo # Move to a new line after key press

if [[ $key == "y" ]]; then
  git commit -F - <<<"$COMMIT_MESSAGE"
  echo "Changes committed successfully!"
else
  echo "Commit aborted."
  exit 1
fi
